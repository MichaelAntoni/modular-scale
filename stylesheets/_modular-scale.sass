// Ratios
$golden: 1.618 
$octave: (2 / 1)
$major-seventh: (15 / 8)
$minor-seventh: (16 / 9)
$major-sixth: (5 / 3)
$minor-sixth: (8 / 5)
$fifth: (3 / 2)
$fourth: (4 / 3)
$major-third: (5 / 4)
$minor-third: (6 / 5)
$major-second: (9 / 8)
$minor-second: (16 / 15)

// Defaults
$ratio: $golden !default
$base-size: 12px !default
$property: font-size !default
$class-slug: ms !default

// Modular Scale function
@function ms($multiple, $base-size, $ratio)
  @if type-of($ratio) == 'list'
    // Prevent calculating for multiple ratios and base-sizes
    @if type-of($base-size) == 'list'
      @return ("Multiple base-sizes and ratios is not supported at this time")
    // logic for multiple ratios
    
    @return ("Multiple ratio test")
  @if type-of($base-size) == 'list'
    // logic for multiple base-sizes
    
    @return ("Multiple base-size test")
  // If there are no lists just run the simple function
  @return (exponent($ratio, $multiple) * $base-size)


/////////////////////////////////////////////////////////////////////////

// Shortcut
@function modular-scale($multiple, $base-size, $ratio)
  // Return the value from the Modular Scale function
  @return ms($multiple, $base-size, $ratio)

// Mixin
=modular-scale($property, $multiple, $base-size, $ratio)
  // Print the $property and return the value from the Modular Scale function
  #{$property}: ms($multiple, $base-size, $ratio)

// Classes Mixin
=modular-scale-classes($multiple, $property, $class-slug, $base-size, $ratio)
  // Loop from 0 through the value of $multiple and generate a range of classes
  @for $i from 0 through $multiple
    .#{$class-slug}-#{$i}
      +modular-scale($property, $i, $base-size, $ratio)


/////////////////////////////////////////////////////////////////////////

// Sass exponent support
@function exponent($base, $exponent)
  // reset value
  $value: $base
  // positive intergers get multiplied
  @if $exponent > 1
    @for $i from 2 through $exponent
      $value: $value * $base
  // negitive intergers get divided. A number divided by itself is 1
  @if $exponent < 1
    @for $i from 0 through -$exponent
      $value: $value / $base
  // return the last value written
  @return ($value)


// Calculate position on a scale
@function position($base, $multiple, $ratio)
  // initialise $position as 0
  $position: $base
  
  @if $multiple == 0
    @return $position
  
  // If $multiple is a positive integer (up the scale)
  @if $multiple > 0
    @for $i from 1 through ($multiple)
      $position: $position * $ratio
  // If $multiple is a negative integer (down the scale)
  @if $multiple < 0
    @for $i from 1 through ($multiple * -1)
      $position: $position / $ratio
  // return the calculated position
  @return $position


// Sass list sorting support
@function sort-list($list, $dir: 'asc')
  // built-in list sorting in Sass would make this go away.
  // declare some empty lists to put our new order and temporary values 
  $new-order: ()
  $temp: ()
  // fill $temp with the contents of $list
  $temp: join($temp, $list)
  // if sorting ascending
  @if $dir == 'asc'
    // loop through all values in $list
    @for $i from 1 through length($list)
      // impossibly high starter value to compare
      $low: 1000000
      // check for lowest value in $temp
      @for $j from 1 through length($temp)
        @if nth($temp, $j) < $low
          $low: nth($temp, $j)
      // add lowest value to $new-order
      $new-order: append($new-order, $low)
      // empty $temp for the next comparison
      $temp: ()
      // re-populate $temp with remaining values to sort
      @for $k from 1 through length($list)
        @if nth($list, $k) > $low
          $temp: append($temp, nth($list, $k))
  @if $dir == 'dec'
    // loop through all values in $list
    @for $i from 1 through length($list)
      // 0 starter value
      $high: 0
      // check for highest value in $temp
      @for $j from 1 through length($temp)
        @if nth($temp, $j) > $high
          $high: nth($temp, $j)
      $new-order: append($new-order, $high)
      // empty $temp for the next comparison
      $temp: ()
      // re-populate $temp with remaining values to sort
      @for $k from 1 through length($list)
        @if nth($list, $k) < $high
          $temp: append($temp, nth($list, $k))
  @return $new-order